<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="9" skipped="0" tests="13" time="0.278" timestamp="2025-02-28T09:32:57.741351+11:00" hostname="DESKTOP-C1SG7NO"><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_parser_initialization" time="0.002"><failure message="AssertionError: assert 'tsql' == 'ansi'&#10;  &#10;  - ansi&#10;  + tsql">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E54CFF20&gt;

    def test_parser_initialization(self):
        """Test that the parser initializes with different dialects."""
        # Default initialization
        parser = SQLParser()
&gt;       assert parser.dialect_name == 'ansi'
E       AssertionError: assert 'tsql' == 'ansi'
E         
E         - ansi
E         + tsql

sql_converter\tests\unit\parsers\test_sql_parser.py:20: AssertionError</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_basic_parsing" time="0.008" /><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_multi_statement_parsing" time="0.001" /><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_statement_splitting" time="0.005"><failure message="AssertionError: assert 'Comment' not in '/* Comment ...p VALUES (1)'&#10;  &#10;  'Comment' is contained here:&#10;    /* Comment */ INSERT INTO #temp VALUES (1)&#10;  ?    +++++++">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E54EF6E0&gt;
sql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E54EF800&gt;

    def test_statement_splitting(self, sql_parser):
        """Test splitting SQL into individual statements."""
        sql = """
        SELECT * FROM table;
        -- Comment
        INSERT INTO #temp VALUES (1);
        """
    
        # Split statements using the parser
        statements = sql_parser.split_statements(sql)
    
        # Verify the results
        assert len(statements) == 2
        assert "SELECT" in statements[0]
        assert "INSERT" in statements[1]
    
        # Verify comments are handled correctly
        assert "Comment" not in statements[0]
&gt;       assert "Comment" not in statements[1]
E       AssertionError: assert 'Comment' not in '/* Comment ...p VALUES (1)'
E         
E         'Comment' is contained here:
E           /* Comment */ INSERT INTO #temp VALUES (1)
E         ?    +++++++

sql_converter\tests\unit\parsers\test_sql_parser.py:92: AssertionError</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_dialect_specific_parsing" time="0.002"><failure message="AssertionError: assert 'LIMIT' in 'SELECT * FROM ` AS USERS'&#10; +  where 'SELECT * FROM ` AS USERS' = &lt;built-in method upper of str object at 0x00000201E5567140&gt;()&#10; +    where &lt;built-in method upper of str object at 0x00000201E5567140&gt; = 'SELECT * FROM ` AS users'.upper">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E54EF710&gt;
tsql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E5587C50&gt;
mysql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E5585E80&gt;

    def test_dialect_specific_parsing(self, tsql_parser, mysql_parser):
        """Test dialect-specific SQL features."""
        # Test T-SQL specific features
        tsql = "SELECT [col.name] FROM [dbo].[table];"
    
        tsql_expressions = tsql_parser.parse(tsql)
        assert len(tsql_expressions) == 1
    
        # Test MySQL specific features
        mysql = "SELECT * FROM `users` LIMIT 10;"
    
        mysql_expressions = mysql_parser.parse(mysql)
        assert len(mysql_expressions) == 1
    
        # Limit should be preserved
        mysql_sql = mysql_parser.to_sql(mysql_expressions[0])
&gt;       assert "LIMIT" in mysql_sql.upper()
E       AssertionError: assert 'LIMIT' in 'SELECT * FROM ` AS USERS'
E        +  where 'SELECT * FROM ` AS USERS' = &lt;built-in method upper of str object at 0x00000201E5567140&gt;()
E        +    where &lt;built-in method upper of str object at 0x00000201E5567140&gt; = 'SELECT * FROM ` AS users'.upper

sql_converter\tests\unit\parsers\test_sql_parser.py:110: AssertionError</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_validate_sql" time="0.002"><failure message="Failed: DID NOT RAISE &lt;class 'sql_converter.exceptions.SQLSyntaxError'&gt;">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E54EF9B0&gt;
sql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E5586540&gt;

    def test_validate_sql(self, sql_parser):
        """Test SQL validation capabilities."""
        # Test valid SQL
        valid_sql = "SELECT * FROM users WHERE id = 1;"
        sql_parser.validate_sql(valid_sql)  # Should not raise
    
        # Test invalid SQL
        invalid_sql = "SELECT FROM WHERE;"
&gt;       with pytest.raises(SQLSyntaxError):
E       Failed: DID NOT RAISE &lt;class 'sql_converter.exceptions.SQLSyntaxError'&gt;

sql_converter\tests\unit\parsers\test_sql_parser.py:120: Failed</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_syntax_error_detection" time="0.002"><failure message="Failed: DID NOT RAISE &lt;class 'sql_converter.exceptions.SQLSyntaxError'&gt;">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E54EFB30&gt;
sql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E5534830&gt;

    def test_syntax_error_detection(self, sql_parser):
        """Test that syntax errors are properly detected and reported."""
        invalid_sql = "SELECT FROM users;"
    
        # This should raise a SQLSyntaxError
&gt;       with pytest.raises(SQLSyntaxError) as excinfo:
E       Failed: DID NOT RAISE &lt;class 'sql_converter.exceptions.SQLSyntaxError'&gt;

sql_converter\tests\unit\parsers\test_sql_parser.py:133: Failed</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_find_table_references" time="0.002" /><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_find_temp_tables" time="0.003"><failure message="assert False&#10; +  where False = any(&lt;generator object TestSQLParser.test_find_temp_tables.&lt;locals&gt;.&lt;genexpr&gt; at 0x00000201E559EB50&gt;)">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E54EFE30&gt;
sql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E54B5F10&gt;

    def test_find_temp_tables(self, sql_parser):
        """Test finding temporary tables in SQL."""
        sql = """
        SELECT * INTO #temp1 FROM users;
        CREATE TEMP TABLE #temp2 AS SELECT * FROM orders;
        SELECT t1.id, t2.order_id FROM #temp1 t1 JOIN #temp2 t2 ON t1.id = t2.user_id;
        """
    
        # Find temp tables with patterns
        temp_tables = sql_parser.find_temp_tables(sql, ['#.*'])
    
        # Verify we found both temp tables
        temp_names = [info['name'] for info in temp_tables]
        assert '#temp1' in temp_names
        assert '#temp2' in temp_names
    
        # Verify types are correct
        types = {info['name']: info['type'] for info in temp_tables}
        assert types['#temp1'] == 'SELECT_INTO'
    
        # At least one of the temp tables should be recognized as CREATE_TEMP type
&gt;       assert any(t['type'] in ('CREATE_TEMP', 'CREATE_TEMP_AS') for t in temp_tables)
E       assert False
E        +  where False = any(&lt;generator object TestSQLParser.test_find_temp_tables.&lt;locals&gt;.&lt;genexpr&gt; at 0x00000201E559EB50&gt;)

sql_converter\tests\unit\parsers\test_sql_parser.py:190: AssertionError</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_replace_references" time="0.002"><failure message="AssertionError: assert '#temp' not in 'SELECT * FR...WHERE id = 1'&#10;  &#10;  '#temp' is contained here:&#10;    SELECT * FROM #temp WHERE id = 1&#10;  ?               +++++">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E54EFFB0&gt;
sql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E5585E20&gt;

    def test_replace_references(self, sql_parser):
        """Test replacing table references in an AST."""
        sql = "SELECT * FROM #temp WHERE id = 1;"
    
        # Parse SQL
        expressions = sql_parser.parse(sql)
    
        # Replace references
        replacements = {'#temp': 'cte_temp'}
        modified = sql_parser.replace_references(expressions[0], replacements)
    
        # Convert back to SQL and verify the replacement
        modified_sql = sql_parser.to_sql(modified)
&gt;       assert '#temp' not in modified_sql
E       AssertionError: assert '#temp' not in 'SELECT * FR...WHERE id = 1'
E         
E         '#temp' is contained here:
E           SELECT * FROM #temp WHERE id = 1
E         ?               +++++

sql_converter\tests\unit\parsers\test_sql_parser.py:205: AssertionError</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_generate_cte" time="0.003"><failure message="AssertionError: assert 'WITH user_cte AS' in 'WITH USER_CTE AS (SELECT * FROM USERS WHERE ID = 1)'&#10; +  where 'WITH USER_CTE AS (SELECT * FROM USERS WHERE ID = 1)' = &lt;built-in method upper of str object at 0x00000201E55A9A10&gt;()&#10; +    where &lt;built-in method upper of str object at 0x00000201E55A9A10&gt; = 'WITH user_cte AS (SELECT * FROM users WHERE id = 1)'.upper">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E5534170&gt;
sql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E5585B80&gt;

    def test_generate_cte(self, sql_parser):
        """Test generating a CTE from a subquery."""
        sql = "SELECT * FROM users WHERE id = 1;"
    
        # Parse SQL
        expressions = sql_parser.parse(sql)
        select_expr = expressions[0]
    
        # Generate a CTE
        cte = sql_parser.generate_cte('user_cte', select_expr)
    
        # Verify result is a With expression
        assert isinstance(cte, exp.With)
    
        # Verify CTE name and definition is in the SQL
        cte_sql = sql_parser.to_sql(cte)
&gt;       assert 'WITH user_cte AS' in cte_sql.upper()
E       AssertionError: assert 'WITH user_cte AS' in 'WITH USER_CTE AS (SELECT * FROM USERS WHERE ID = 1)'
E        +  where 'WITH USER_CTE AS (SELECT * FROM USERS WHERE ID = 1)' = &lt;built-in method upper of str object at 0x00000201E55A9A10&gt;()
E        +    where &lt;built-in method upper of str object at 0x00000201E55A9A10&gt; = 'WITH user_cte AS (SELECT * FROM users WHERE id = 1)'.upper

sql_converter\tests\unit\parsers\test_sql_parser.py:228: AssertionError</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_comment_handling" time="0.003"><failure message="AssertionError: assert 'This is a comment' not in '/* This is ...* FROM users'&#10;  &#10;  'This is a comment' is contained here:&#10;    /* This is a comment */ SELECT * FROM users&#10;  ?    +++++++++++++++++">self = &lt;test_sql_parser.TestSQLParser object at 0x00000201E55342F0&gt;
sql_parser = &lt;sql_converter.parsers.sql_parser.SQLParser object at 0x00000201E5587E30&gt;

    def test_comment_handling(self, sql_parser):
        """Test that comments are properly handled."""
        sql = """
        -- This is a comment
        SELECT * FROM users; /* This is another comment */
        -- This is a final comment
        """
    
        # Parse SQL
        expressions = sql_parser.parse(sql)
    
        # Verify the comment doesn't interfere with the parse
        assert len(expressions) == 1
        assert isinstance(expressions[0], exp.Select)
    
        # Convert back to SQL
        result_sql = sql_parser.to_sql(expressions[0])
    
        # Comments should be removed in the parsed output
&gt;       assert "This is a comment" not in result_sql
E       AssertionError: assert 'This is a comment' not in '/* This is ...* FROM users'
E         
E         'This is a comment' is contained here:
E           /* This is a comment */ SELECT * FROM users
E         ?    +++++++++++++++++

sql_converter\tests\unit\parsers\test_sql_parser.py:250: AssertionError</failure></testcase><testcase classname="sql_converter.tests.unit.parsers.test_sql_parser.TestSQLParser" name="test_to_sql_format_consistency" time="0.002" /></testsuite></testsuites>